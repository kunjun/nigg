<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>金·云古</title>
  
  
  <link href="/nigg/atom.xml" rel="self"/>
  
  <link href="https://kunjun.github.io/nigg/"/>
  <updated>2019-05-16T15:37:53.079Z</updated>
  <id>https://kunjun.github.io/nigg/</id>
  
  <author>
    <name>Ging Wing</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git如何配置多个ssh key</title>
    <link href="https://kunjun.github.io/nigg/2019/05/16/git-peizhi-duoge-ssh-key/"/>
    <id>https://kunjun.github.io/nigg/2019/05/16/git-peizhi-duoge-ssh-key/</id>
    <published>2019-05-16T15:35:06.000Z</published>
    <updated>2019-05-16T15:37:53.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生成公司用的-ssh-key"><a href="#生成公司用的-ssh-key" class="headerlink" title="生成公司用的 ssh key"></a>生成公司用的 ssh key</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "myname@company.com” -f ~/.ssh/company_rsa</span><br></pre></td></tr></table></figure><h2 id="生成github用的-ssh-key"><a href="#生成github用的-ssh-key" class="headerlink" title="生成github用的 ssh key"></a>生成github用的 ssh key</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "myname@github.com” -f ~/.ssh/github_rsa</span><br></pre></td></tr></table></figure><p>现在. 你的ssh目录下应该有4个文件：company_rsa和company_rsa.pub，github_rsa和github_rsa.pub，将他们的公钥文件（company_rsa.pub，github_rsa.pub）内容复制到对应的远程GitHub仓库系统证书配置上</p><h2 id="下面简单介绍github代码托管平台的公钥配置"><a href="#下面简单介绍github代码托管平台的公钥配置" class="headerlink" title="下面简单介绍github代码托管平台的公钥配置"></a>下面简单介绍github代码托管平台的公钥配置</h2><a id="more"></a><p><img src="./images/20190516231955.png" alt="github ssh key 公钥配置" title="github ssh key 公钥配置"></p><p><img src="./images/20190516232124.png" alt="github ssh key 公钥配置" title="github ssh key 公钥配置"></p><h2 id="本地git客户端添加私钥"><a href="#本地git客户端添加私钥" class="headerlink" title="本地git客户端添加私钥"></a>本地git客户端添加私钥</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/company_rsa $ ssh-add ~/.ssh/github_rsa</span><br></pre></td></tr></table></figure><blockquote><p>如果 ssh-add 提示”Could not open a connection to your authentication agent”，<br>可以先执行命令 “ssh-agent bash”<br>或者 “eval <code>ssh-agent -s</code>“<br>会出现类似 Agent pid 6088 字符, 则启动成功<br>然后再次执行”ssh-add ~/.ssh/company_rsa $ ssh-add ~/.ssh/github_rsa”</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 添加完成后, 我们就可以通过 ssh-add -l 查看私钥列表</span><br><span class="line"><span class="meta">#</span> 通过 ssh-add -D 来清空私钥列表</span><br></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>如果.ssh目录(私钥所在的文件夹)下没有config文件，则创建<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch config</span><br></pre></td></tr></table></figure></p><p>在config文件添加内容如下:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> github</span><br><span class="line">Host github.com</span><br><span class="line">Port 22</span><br><span class="line">HostName github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile C:/Users/yourname/.ssh/github-rsa</span><br><span class="line">User yourname</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> company</span><br><span class="line">Host company</span><br><span class="line">HostName company</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile C:/Users/yourname/.ssh/company_rsa</span><br><span class="line">User yourname</span><br><span class="line"><span class="meta">#</span> 配置文件参数</span><br><span class="line"><span class="meta">#</span> Host : Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件（可以直接填写ip地址）</span><br><span class="line"><span class="meta">#</span> HostName : 要登录主机的主机名（建议与Host一致）</span><br><span class="line"><span class="meta">#</span> User : 登录名（比如github的username）</span><br><span class="line"><span class="meta">#</span> IdentityFile : 指明上面User对应的identityFile路径</span><br><span class="line"><span class="meta">#</span> Port: 端口号（默认22号端口，如果不是则需要指定）</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      通过在git bash下的相关命令, 实现一台电脑配置多个git证书ssh key
    
    </summary>
    
      <category term="Tech" scheme="https://kunjun.github.io/nigg/categories/Tech/"/>
    
    
      <category term="Git" scheme="https://kunjun.github.io/nigg/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建Github Pages，自定义域名，开启https，用Hexo构建静态博客。</title>
    <link href="https://kunjun.github.io/nigg/2019/05/16/github-pages-hexo-https-custom-domain/"/>
    <id>https://kunjun.github.io/nigg/2019/05/16/github-pages-hexo-https-custom-domain/</id>
    <published>2019-05-16T14:03:12.000Z</published>
    <updated>2019-05-16T15:37:16.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-注册Github账号"><a href="#1-注册Github账号" class="headerlink" title="1. 注册Github账号"></a>1. 注册Github账号</h2><p>如果你已经有GitHub账号，跳过此步骤。<a href="https://github.com" title="Github" target="_blank" rel="noopener">前往注册</a></p><h2 id="2-创建github-pages项目仓库"><a href="#2-创建github-pages项目仓库" class="headerlink" title="2. 创建github pages项目仓库"></a>2. 创建github pages项目仓库</h2><p>github pages：是GitHub为了给用户建立个人主页的项目，开发者完全可以当成一个静态博客来用，完全免费。</p><p>创建github pages项目，具体过程看下图：</p><p><img src="./images/20190516222304.png" alt="创建github pages项目" title="创建github pages项目"></p><p>注意：一定要 你的用户名.github.io，这是规定。</p><h2 id="3-开启github-pages"><a href="#3-开启github-pages" class="headerlink" title="3. 开启github pages"></a>3. 开启github pages</h2><p><img src="./images/20190516222857.png" alt="开启github pages" title="开启github pages"></p><p>注意：github pages的规则是，username.github.io 是默认开启，如果你的项目名叫“myblog”，那么需要手动开启，你的这个github pages的地址就会是，子目录的形式，如：<a href="https://username.github.io/myblog" target="_blank" rel="noopener">https://username.github.io/myblog</a></p><a id="more"></a><p><img src="./images/20190516223437.png" alt="开启github pages" title="开启github pages"></p><blockquote><p>绑定域名, 在 “Custom domain” 下方输入框输入你的域名即可,<br>比如”<a href="http://www.uoogre.com&quot;" target="_blank" rel="noopener">www.uoogre.com&quot;</a>,<br>注意: 绑定域名最好只在项目名为 “username.github.io”下绑定, 其他项目比如”myblog”放空, 这样就能实现绑定域名子目录的效果, <a href="http://www.xxxxx.com/myblog" target="_blank" rel="noopener">www.xxxxx.com/myblog</a></p></blockquote><h2 id="4-上传文件到GitHub-pages"><a href="#4-上传文件到GitHub-pages" class="headerlink" title="4. 上传文件到GitHub pages"></a>4. 上传文件到GitHub pages</h2><p>安卓git客户端，设置证书，如果你有多个不同服务器的git远程仓库，可以设置多个证书，具体看我的这篇博文，<a href="https://www.uoogre.com/nigg/git-ruhepeizhiduogesshkey/" target="_blank" rel="noopener">Git如何配置多个ssh key</a></p><h2 id="5-安装Hexo，构建静态博客"><a href="#5-安装Hexo，构建静态博客" class="headerlink" title="5. 安装Hexo，构建静态博客"></a>5. 安装Hexo，构建静态博客</h2><ol><li>先安装node.js<br><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">下载Node.js</a></li><li>安装Hexo<blockquote><p>在你要安装的hexo位置，右键打开Git Bash</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-cli -g</span><br><span class="line">hexo init #初始化</span><br><span class="line">npm i</span><br><span class="line">hexo g #生成 hexo generate 该命令的简写</span><br><span class="line">hexo s #启动本地web服务器 hexo server 该命令的简写, 启用服务器之后，你就可以通过 http://localhost:4000 查看了</span><br></pre></td></tr></table></figure></blockquote></li></ol><blockquote><p>更多命令，请参考<a href="https://hexo.io/docs/commands.html" target="_blank" rel="noopener">Hexo文档</a><br>这里介绍几个实用命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo new "文章名" #新建文章</span><br><span class="line">hexo new page "页面名" #新建页面</span><br><span class="line">hexo g # 生成</span><br><span class="line">hexo s # 开启服务器，按Ctrl + C 可以结束</span><br><span class="line">hexo s --debug # 通过此命令可以调试开发模板</span><br><span class="line">hexo d -g # 生成并上传部署到远程仓库</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>一些hexo的命令简写<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure></p></blockquote><ol start="3"><li>添加hexo主题<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>启用主题。修改站点配置文件，根目录下_config.yml，<br>theme: next</p></blockquote><ol start="4"><li>使用Hexo deploy上传部署到github<br>修改根目录下_config.yml文件<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">    repo:</span> <span class="string">git@github.com:cczeng/cczeng.github.io.git</span>  <span class="comment">#这里的网址填你自己的</span></span><br><span class="line"><span class="attr">    branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo d #上传部署到github</span><br></pre></td></tr></table></figure><h2 id="5-现在你可以在线访问你的博客了"><a href="#5-现在你可以在线访问你的博客了" class="headerlink" title="5. 现在你可以在线访问你的博客了"></a>5. 现在你可以在线访问你的博客了</h2><p>访问这个地址 <a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> 看看你效果.</p>]]></content>
    
    <summary type="html">
    
      用Github Pages+Hexo搭建一个无限流量的静态博客，并绑定自己注册的域名，开启https。
    
    </summary>
    
      <category term="Tech" scheme="https://kunjun.github.io/nigg/categories/Tech/"/>
    
    
      <category term="Github Pages" scheme="https://kunjun.github.io/nigg/tags/Github-Pages/"/>
    
      <category term="Hexo" scheme="https://kunjun.github.io/nigg/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>test code highlight</title>
    <link href="https://kunjun.github.io/nigg/2019/05/16/test-code-highlight/"/>
    <id>https://kunjun.github.io/nigg/2019/05/16/test-code-highlight/</id>
    <published>2019-05-16T13:56:58.670Z</published>
    <updated>2019-05-16T15:12:06.615Z</updated>
    
    <content type="html"><![CDATA[<p>在这里测试hexo中的代码高亮</p><h2 id="下面是python代码"><a href="#下面是python代码" class="headerlink" title="下面是python代码"></a>下面是python代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">print(<span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure><h2 id="下面是php代码"><a href="#下面是php代码" class="headerlink" title="下面是php代码"></a>下面是php代码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include</span> config.php;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'hello world'</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="下面是java"><a href="#下面是java" class="headerlink" title="下面是java"></a>下面是java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里测试结束。</p>]]></content>
    
    <summary type="html">
    
      测试hexo中的代码高亮
    
    </summary>
    
      <category term="Tech" scheme="https://kunjun.github.io/nigg/categories/Tech/"/>
    
    
      <category term="Highlight" scheme="https://kunjun.github.io/nigg/tags/Highlight/"/>
    
      <category term="Code" scheme="https://kunjun.github.io/nigg/tags/Code/"/>
    
  </entry>
  
</feed>
